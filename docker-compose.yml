version: "3.5"

networks:
  services:
    name: services
    driver: bridge

services:
  developer-console-ui:
    image: developer-console-ui:1.0
    container_name: developer-console-ui 
    build:
      context: .
      dockerfile: developer-console-ui/Dockerfile    
    ports:
    - "3000:3000"
    environment:
      APP_DCO_GATEWAY_SERVICE_URL: http://localhost:8080
      NEXT_PUBLIC_FILE: http://minio:9000/dco-scenario-library-service/scenario/fe7f4c94-c21a-4a4b-a3fc-c1b309b0f5f0/files/software_package.txt
    restart: unless-stopped
    depends_on:
      - dco-gateway
  
  dco-gateway:
    image: dco-gateway:1.0
    container_name: dco-gateway
    build:
      context: .
      dockerfile: dco-gateway/Dockerfile.app
    ports:
    - "8080:8080"
    environment:
      APP_REST_PORT: 8080
      TRACK_MANAGEMENT_URL: tracks-management-service:8081
      SCENARIO_LIBRARY_URL: scenario-library-service:8082
      REDIS_HOST: redis
      REDIS_PORT: 6379
    depends_on:
      - redis
    restart: unless-stopped
  
  tracks-management-service:
    image: tracks-management-service:1.0
    container_name: tracks-management-service  
    build:
      context: .
      dockerfile: tracks-management-service/Dockerfile.app
    ports:
    - "8081:8081"
    environment:
      APP_REST_PORT: 8081
      APP_POSTGRES_HOST: postgres
      APP_POSTGRES_PORT: 5432
      APP_POSTGRES_DATABASE: postgres
      APP_POSTGRES_USERNAME: postgres
      APP_POSTGRES_PASSWORD: postgres
      SCENARIO-SERVICE_URL: scenario-library-service:8082
    restart: unless-stopped
    depends_on:
      - postgres 
      - pgadmin

  scenario-library-service:
    image: scenario-library-service:1.0
    container_name: scenario-library-service    
    build:
      context: .
      dockerfile: scenario-library-service/Dockerfile.app
    ports:
    - "8082:8082"
    env_file:
    - minio/minio_keys.env
    environment:
      APP_REST_PORT: 8082
      APP_STORAGE_URL: http://minio:9000
      APP_STORAGE_BUCKET: dco-scenario-library-service
      APP_POSTGRES_HOST: postgres
      APP_POSTGRES_PORT: 5432
      APP_POSTGRES_DATABASE: postgres
      APP_POSTGRES_USERNAME: postgres
      APP_POSTGRES_PASSWORD: postgres
      TRACK-SERVICE_URL: tracks-management-service:8081
    restart: unless-stopped
    depends_on:
      - postgres
      - pgadmin

  minio:
    image: minio:1.0
    build:
      context: .
      dockerfile: minio/Dockerfile.minio
    container_name: minio
    hostname: minio
    user: 1000:1000
    ports:
    - "9000:9000"
    - "9001:9001"
    environment:
      MINIO_ROOT_USER: minioadmin
      MINIO_ROOT_PASSWORD: minioadmin
      MINIO_SERVER_URL: http://localhost:9000
    restart: unless-stopped  

  postgres: 
    image: postgres:1.0
    build:
      context: .
      dockerfile: postgres/Dockerfile.database
    container_name: postgres 
    ports:
    - "5432:5432"
    environment:
      POSTGRES_DB: postgres
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    restart: unless-stopped

  pgadmin:   
    image: dpage/pgadmin4
    container_name: pgadmin
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@default.com
      PGADMIN_DEFAULT_PASSWORD: admin
    ports:
      - "5050:80" 
    depends_on:
      - postgres
    restart: unless-stopped

  # RabbitMQ Message Broker
  rabbitmq:
    image: rabbitmq:3-management
    container_name: rabbitmq
    environment:
      RABBITMQ_DEFAULT_USER: admin
      RABBITMQ_DEFAULT_PASS: admin123
      RABBITMQ_DEFAULT_VHOST: /
    ports:
      - "5672:5672"    # AMQP port
      - "15672:15672"  # Management UI port
    restart: unless-stopped

  # Redis for Enhanced API Gateway Caching
  redis:
    image: redis:7-alpine
    container_name: redis
    ports:
      - "6379:6379"
    command: redis-server --appendonly yes
    volumes:
      - redis-data:/data
    restart: unless-stopped

  # Message Queue Service
  message-queue-service:
    image: message-queue-service:1.0
    container_name: message-queue-service
    build:
      context: .
      dockerfile: message-queue-service/Dockerfile.app
    ports:
      - "8083:8083"
    environment:
      APP_REST_PORT: 8083
      SPRING_RABBITMQ_HOST: rabbitmq
      SPRING_RABBITMQ_PORT: 5672
      SPRING_RABBITMQ_USERNAME: admin
      SPRING_RABBITMQ_PASSWORD: admin123
    restart: unless-stopped
    depends_on:
      - rabbitmq

  # Webhook Management Service
  webhook-management-service:
    image: webhook-management-service:1.0
    container_name: webhook-management-service
    build:
      context: .
      dockerfile: webhook-management-service/Dockerfile.app
    ports:
      - "8084:8084"
    environment:
      APP_REST_PORT: 8084
      APP_POSTGRES_HOST: postgres
      APP_POSTGRES_PORT: 5432
      APP_POSTGRES_DATABASE: postgres
      APP_POSTGRES_USERNAME: postgres
      APP_POSTGRES_PASSWORD: postgres
      SPRING_RABBITMQ_HOST: rabbitmq
      SPRING_RABBITMQ_PORT: 5672
      SPRING_RABBITMQ_USERNAME: admin
      SPRING_RABBITMQ_PASSWORD: admin123
      MESSAGE_QUEUE_SERVICE_URL: message-queue-service:8083
    restart: unless-stopped
    depends_on:
      - postgres
      - rabbitmq
      - message-queue-service

  # Prometheus server for metrics collection
  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
    restart: unless-stopped

  # Grafana for metrics visualization
  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - grafana-data:/var/lib/grafana
    depends_on:
      - prometheus
    restart: unless-stopped

volumes:
  rabbitmq_data:
    driver: local
  redis-data:
    driver: local
  grafana-data:
    driver: local
